### Generated by Winemaker 0.8.3
###
### Invocation command line was
### /usr/bin/winemaker --lower-uppercase --mfc .


SRCDIR                = .
SUBDIRS               =
DLLS                  =
LIBS                  = libscriptengine.a
EXES                  =



### Common settings

CEXTRA                = -mno-cygwin -fpermissive
CXXEXTRA              = -mno-cygwin -fpermissive
RCEXTRA               =
DEFINES               =
INCLUDE_PATH          = -I. \
			$(MFC_INCLUDE_PATH)
DLL_PATH              =
DLL_IMPORTS           =
LIBRARY_PATH          =
LIBRARIES             =


### libscriptengine.a sources and settings

libscriptengine_a_MODULE= libscriptengine.a
libscriptengine_a_C_SRCS= libyywrap.c
libscriptengine_a_CXX_SRCS= PromptDialog.cpp \
			javascript.tab.c \
			lex.yy.c \
			Script.cpp \
			ScriptObject.cpp \
			Script_Math.cpp \
			ScriptingEngine.cpp \
			Variant.cpp \
			VariantArray.cpp \
			javascript.cpp
libscriptengine_a_RC_SRCS=
libscriptengine_a_LDFLAGS= -mno-cygwin
libscriptengine_a_ARFLAGS= rc
libscriptengine_a_DLL_PATH= $(MFC_LIBRARY_PATH)
libscriptengine_a_DLLS= odbc32 \
			ole32 \
			oleaut32 \
			winspool \
			odbccp32 \
			mfc.dll
libscriptengine_a_LIBRARY_PATH= $(MFC_LIBRARY_PATH)
libscriptengine_a_LIBRARIES= uuid \
			mfc

libscriptengine_a_OBJS= $(libscriptengine_a_C_SRCS:.c=.o) \
			$(libscriptengine_a_CXX_SRCS:.cpp=.o) \
			$(libscriptengine_a_RC_SRCS:.rc=.res)



### Global source lists

C_SRCS                = $(libscriptengine_a_C_SRCS)
CXX_SRCS              = $(libscriptengine_a_CXX_SRCS)
RC_SRCS               = $(libscriptengine_a_RC_SRCS)


### Tools

CC = winegcc
CXX = wineg++
RC = wrc
AR = ar


### Generic targets

all: $(SUBDIRS) $(DLLS:%=%.so) $(LIBS) $(EXES)

### Build rules

.PHONY: all clean dummy

$(SUBDIRS): dummy
	@cd $@ && $(MAKE)

# Implicit rules

.SUFFIXES: .cpp .cxx .rc .res
DEFINCL = $(INCLUDE_PATH) $(DEFINES) $(OPTIONS)

.c.o:
	$(CC) -c $(CFLAGS) $(CEXTRA) $(DEFINCL) -o $@ $<

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.rc.res:
	$(RC) $(RCFLAGS) $(RCEXTRA) $(DEFINCL) -fo$@ $<

# Rules for cleaning

CLEAN_FILES     = y.tab.c y.tab.h lex.yy.c core *.orig *.rej \
                  \\\#*\\\# *~ *% .\\\#*

clean:: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__)
	$(RM) $(CLEAN_FILES) $(RC_SRCS:.rc=.res) $(C_SRCS:.c=.o) $(CXX_SRCS:.cpp=.o)
	$(RM) $(DLLS:%=%.so) $(LIBS) $(EXES) $(EXES:%=%.so)

$(SUBDIRS:%=%/__clean__): dummy
	cd `dirname $@` && $(MAKE) clean

$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

### Target specific build rules
DEFLIB = $(LIBRARY_PATH) $(LIBRARIES) $(DLL_PATH) $(DLL_IMPORTS:%=-l%)

$(libscriptengine_a_MODULE): $(libscriptengine_a_OBJS)
	$(AR) $(libscriptengine_a_ARFLAGS) $@ $(libscriptengine_a_OBJS)


